#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module M2
    module TargetType
      DIRECTORY = 1
      PROXY = 2
      HANDLER = 3
      VALUE_MAP = {1 => "DIRECTORY", 2 => "PROXY", 3 => "HANDLER"}
      VALID_VALUES = Set.new([DIRECTORY, PROXY, HANDLER]).freeze
    end

    class Host
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1
      SERVER_ID = 2
      MAINTENANCE = 3
      NAME = 4
      MATCHING = 5

      FIELDS = {
        ID => {:type => ::Thrift::Types::I32, :name => 'id', :optional => true},
        SERVER_ID => {:type => ::Thrift::Types::I32, :name => 'server_id', :optional => true},
        MAINTENANCE => {:type => ::Thrift::Types::BOOL, :name => 'maintenance', :optional => true},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name', :optional => true},
        MATCHING => {:type => ::Thrift::Types::STRING, :name => 'matching'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field matching is unset!') unless @matching
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Route
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1
      PATH = 2
      REVERSED = 3
      HOST_ID = 4
      TARGET_ID = 5
      TARGET_TYPE = 6
      ADDITIONAL_FIELDS = 7

      FIELDS = {
        ID => {:type => ::Thrift::Types::I32, :name => 'id', :optional => true},
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        REVERSED => {:type => ::Thrift::Types::BOOL, :name => 'reversed', :optional => true},
        HOST_ID => {:type => ::Thrift::Types::I32, :name => 'host_id'},
        TARGET_ID => {:type => ::Thrift::Types::I32, :name => 'target_id'},
        TARGET_TYPE => {:type => ::Thrift::Types::I32, :name => 'target_type', :enum_class => M2::TargetType},
        ADDITIONAL_FIELDS => {:type => ::Thrift::Types::MAP, :name => 'additional_fields', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field path is unset!') unless @path
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field host_id is unset!') unless @host_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field target_id is unset!') unless @target_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field target_type is unset!') unless @target_type
        unless @target_type.nil? || M2::TargetType::VALID_VALUES.include?(@target_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field target_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
