#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'm2config/types'

    module M2
      module Config
        class Client
          include ::Thrift::Client

          def find_or_add_host(host)
            send_find_or_add_host(host)
            return recv_find_or_add_host()
          end

          def send_find_or_add_host(host)
            send_message('find_or_add_host', Find_or_add_host_args, :host => host)
          end

          def recv_find_or_add_host()
            result = receive_message(Find_or_add_host_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_or_add_host failed: unknown result')
          end

          def remove_host(host_id)
            send_remove_host(host_id)
            recv_remove_host()
          end

          def send_remove_host(host_id)
            send_message('remove_host', Remove_host_args, :host_id => host_id)
          end

          def recv_remove_host()
            result = receive_message(Remove_host_result)
            return
          end

          def find_routes_for_host(host_id)
            send_find_routes_for_host(host_id)
            return recv_find_routes_for_host()
          end

          def send_find_routes_for_host(host_id)
            send_message('find_routes_for_host', Find_routes_for_host_args, :host_id => host_id)
          end

          def recv_find_routes_for_host()
            result = receive_message(Find_routes_for_host_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_routes_for_host failed: unknown result')
          end

          def find_or_add_route(route)
            send_find_or_add_route(route)
            return recv_find_or_add_route()
          end

          def send_find_or_add_route(route)
            send_message('find_or_add_route', Find_or_add_route_args, :route => route)
          end

          def recv_find_or_add_route()
            result = receive_message(Find_or_add_route_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_or_add_route failed: unknown result')
          end

          def remove_route(route_id)
            send_remove_route(route_id)
            recv_remove_route()
          end

          def send_remove_route(route_id)
            send_message('remove_route', Remove_route_args, :route_id => route_id)
          end

          def recv_remove_route()
            result = receive_message(Remove_route_result)
            return
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_find_or_add_host(seqid, iprot, oprot)
            args = read_args(iprot, Find_or_add_host_args)
            result = Find_or_add_host_result.new()
            result.success = @handler.find_or_add_host(args.host)
            write_result(result, oprot, 'find_or_add_host', seqid)
          end

          def process_remove_host(seqid, iprot, oprot)
            args = read_args(iprot, Remove_host_args)
            result = Remove_host_result.new()
            @handler.remove_host(args.host_id)
            write_result(result, oprot, 'remove_host', seqid)
          end

          def process_find_routes_for_host(seqid, iprot, oprot)
            args = read_args(iprot, Find_routes_for_host_args)
            result = Find_routes_for_host_result.new()
            result.success = @handler.find_routes_for_host(args.host_id)
            write_result(result, oprot, 'find_routes_for_host', seqid)
          end

          def process_find_or_add_route(seqid, iprot, oprot)
            args = read_args(iprot, Find_or_add_route_args)
            result = Find_or_add_route_result.new()
            result.success = @handler.find_or_add_route(args.route)
            write_result(result, oprot, 'find_or_add_route', seqid)
          end

          def process_remove_route(seqid, iprot, oprot)
            args = read_args(iprot, Remove_route_args)
            result = Remove_route_result.new()
            @handler.remove_route(args.route_id)
            write_result(result, oprot, 'remove_route', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Find_or_add_host_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          HOST = 1

          FIELDS = {
            HOST => {:type => ::Thrift::Types::STRUCT, :name => 'host', :class => M2::Host}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field host is unset!') unless @host
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Find_or_add_host_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Remove_host_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          HOST_ID = 1

          FIELDS = {
            HOST_ID => {:type => ::Thrift::Types::I32, :name => 'host_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field host_id is unset!') unless @host_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Remove_host_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Find_routes_for_host_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          HOST_ID = 1

          FIELDS = {
            HOST_ID => {:type => ::Thrift::Types::I32, :name => 'host_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field host_id is unset!') unless @host_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Find_routes_for_host_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => M2::Route}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Find_or_add_route_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROUTE = 1

          FIELDS = {
            ROUTE => {:type => ::Thrift::Types::STRUCT, :name => 'route', :class => M2::Route}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field route is unset!') unless @route
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Find_or_add_route_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Remove_route_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROUTE_ID = 1

          FIELDS = {
            ROUTE_ID => {:type => ::Thrift::Types::I32, :name => 'route_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field route_id is unset!') unless @route_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Remove_route_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
